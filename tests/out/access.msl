#include <metal_stdlib>
#include <simd/simd.h>

struct _mslBufferSizes {
    metal::uint size0;
};

typedef int type2[1];
struct Bar {
    metal::float4x4 matrix;
    type2 data;
};
struct type6 {
    int inner[5];
};

struct fooInput {
};
struct fooOutput {
    metal::float4 member [[position]];
};
vertex fooOutput foo(
  metal::uint vi [[vertex_id]]
, device Bar& bar [[buffer(0)]]
, constant _mslBufferSizes& _buffer_sizes [[buffer(24)]]
) {
    float foo1 = 0.0;
    type6 c;
    foo1 = 1.0;
    metal::float4 _e9 = bar.matrix[3u];
    int _e17 = bar.data[(1 + (_buffer_sizes.size0 - 64 - 4) / 4) - 1u];
    for(int _i=0; _i<5; ++_i) c.inner[_i] = type6 {_e17, static_cast<int>(_e9.x), 3, 4, 5}.inner[_i];
    int _e25 = c.inner[vi];
    return fooOutput { static_cast<float4>(metal::int4(_e25)) };
}
