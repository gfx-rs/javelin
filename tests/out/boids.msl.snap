---
source: tests/snapshots.rs
expression: msl
---
#include <metal_stdlib>
#include <simd/simd.h>

constexpr constant unsigned NUM_PARTICLES = 1500u;
constexpr constant float const_0f = 0.0;
constexpr constant int const_0i = 0;
constexpr constant unsigned const_0u = 0u;
constexpr constant int const_1i = 1;
constexpr constant unsigned const_1u = 1u;
constexpr constant float const_1f = 1.0;
constexpr constant float const_0_10f = 0.1;
constexpr constant float const_n1f = -1.0;
struct Particle {
    metal::float2 pos;
    metal::float2 vel;
};
struct SimParams {
    float deltaT;
    float rule1Distance;
    float rule2Distance;
    float rule3Distance;
    float rule1Scale;
    float rule2Scale;
    float rule3Scale;
};
typedef Particle type3[1];
struct Particles {
    type3 particles;
};

struct main1Input {
};
kernel void main1(
  metal::uint3 global_invocation_id [[thread_position_in_grid]]
, constant SimParams& params [[buffer(0)]]
, constant Particles& particlesSrc [[buffer(1)]]
, device Particles& particlesDst [[buffer(2)]]
) {
    metal::float2 vPos;
    metal::float2 vVel;
    metal::float2 cMass;
    metal::float2 cVel;
    metal::float2 colVel;
    int cMassCount = const_0i;
    int cVelCount = const_0i;
    metal::float2 pos1;
    metal::float2 vel1;
    metal::uint i = const_0u;
    if (global_invocation_id.x >= NUM_PARTICLES) {
        return;
    }
    vPos = particlesSrc.particles[global_invocation_id.x].pos;
    vVel = particlesSrc.particles[global_invocation_id.x].vel;
    cMass = metal::float2(const_0f, const_0f);
    cVel = metal::float2(const_0f, const_0f);
    colVel = metal::float2(const_0f, const_0f);
    bool loop_init = true;
    while(true) {
        if (!loop_init) {
            i = i + const_1u;
        }
        loop_init = false;
        if (i >= NUM_PARTICLES) {
            break;
        }
        if (i == global_invocation_id.x) {
            continue;
        }
        pos1 = particlesSrc.particles[i].pos;
        vel1 = particlesSrc.particles[i].vel;
        if (metal::distance(pos1, vPos) < params.rule1Distance) {
            cMass = cMass + pos1;
            cMassCount = cMassCount + const_1i;
        }
        if (metal::distance(pos1, vPos) < params.rule2Distance) {
            colVel = colVel - (pos1 - vPos);
        }
        if (metal::distance(pos1, vPos) < params.rule3Distance) {
            cVel = cVel + vel1;
            cVelCount = cVelCount + const_1i;
        }
    }
    if (cMassCount > const_0i) {
        cMass = (cMass * (const_1f / static_cast<float>(cMassCount))) - vPos;
    }
    if (cVelCount > const_0i) {
        cVel = cVel * (const_1f / static_cast<float>(cVelCount));
    }
    vVel = ((vVel + (cMass * params.rule1Scale)) + (colVel * params.rule2Scale)) + (cVel * params.rule3Scale);
    vVel = metal::normalize(vVel) * metal::clamp(metal::length(vVel), const_0f, const_0_10f);
    vPos = vPos + (vVel * params.deltaT);
    if (vPos.x < const_n1f) {
        vPos.x = const_1f;
    }
    if (vPos.x > const_1f) {
        vPos.x = const_n1f;
    }
    if (vPos.y < const_n1f) {
        vPos.y = const_1f;
    }
    if (vPos.y > const_1f) {
        vPos.y = const_n1f;
    }
    particlesDst.particles[global_invocation_id.x].pos = vPos;
    particlesDst.particles[global_invocation_id.x].vel = vVel;
    return;
}

